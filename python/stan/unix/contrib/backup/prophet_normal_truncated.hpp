
// Code generated by stanc b5b5a3ca
#include <stan/model/model_header.hpp>
namespace prophet_normal_truncated_model_namespace {

template <typename T, typename S>
std::vector<T> resize_to_match__(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match__(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match__(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match__(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}
std::vector<double> to_doubles__(std::initializer_list<double> x) {
  return x;
}

std::vector<stan::math::var> to_vars__(std::initializer_list<stan::math::var> x) {
  return x;
}

inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 104, column 2 to column 9)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 105, column 2 to column 9)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 106, column 2 to column 18)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 107, column 2 to column 26)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 108, column 2 to column 45)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 109, column 2 to column 40)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 113, column 2 to column 17)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 114, column 2 to column 30)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 115, column 2 to column 38)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 116, column 2 to column 38)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 117, column 2 to column 34)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 122, column 2 to column 19)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 123, column 2 to column 19)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 124, column 2 to column 37)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 125, column 2 to column 29)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 127, column 2 to column 51)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 129, column 64 to column 71)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 129, column 55 to column 62)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 129, column 6 to column 73)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 128, column 24 to line 130, column 3)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 128, column 2 to line 130, column 3)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 130, column 3 to column 4)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 141, column 4 to line 146, column 6)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 140, column 35 to line 147, column 3)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 140, column 9 to line 147, column 3)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 134, column 4 to line 139, column 6)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 133, column 28 to line 140, column 3)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 133, column 2 to line 147, column 3)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 79, column 2 to column 8)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 80, column 2 to column 17)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 81, column 2 to column 14)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 82, column 2 to column 16)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 83, column 2 to column 14)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 84, column 2 to column 8)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 85, column 2 to column 21)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 86, column 2 to column 16)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 87, column 2 to column 19)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 88, column 2 to column 20)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 89, column 2 to column 22)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 90, column 2 to column 16)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 91, column 2 to column 16)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 92, column 2 to column 15)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 93, column 2 to column 27)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 94, column 2 to column 27)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 95, column 2 to column 24)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 99, column 2 to column 17)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 100, column 2 to column 48)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 9, column 4 to column 19)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 10, column 4 to column 24)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 11, column 4 to column 15)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 14, column 4 to column 28)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 15, column 4 to column 33)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 16, column 4 to column 15)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 21, column 8 to column 26)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 22, column 8 to column 28)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 20, column 58 to line 23, column 7)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 20, column 6 to line 23, column 7)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 24, column 6 to column 19)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 19, column 19 to line 25, column 5)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 19, column 4 to line 25, column 5)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 26, column 4 to column 13)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 7, column 73 to line 27, column 3)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 32, column 4 to column 20)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 33, column 4 to column 22)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 34, column 4 to column 14)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 37, column 4 to column 51)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 40, column 4 to column 13)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 42, column 6 to column 66)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 43, column 6 to column 29)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 41, column 19 to line 44, column 5)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 41, column 4 to line 44, column 5)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 45, column 4 to column 17)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 31, column 78 to line 46, column 3)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 58, column 4 to column 20)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 60, column 4 to column 53)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 61, column 4 to column 70)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 57, column 4 to line 62, column 3)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 74, column 4 to column 65)",
                                                      " (in '/home/alexander/anaconda3/envs/exp_env/lib/python3.7/site-packages/fbprophet-0.6-py3.7.egg/fbprophet/stan_model/contrib/prophet_normal_truncated.stan', line 73, column 4 to line 75, column 3)"};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__,
T1__>::type, -1, -1>
get_changepoint_matrix(const Eigen::Matrix<T0__, -1, 1>& t,
                       const Eigen::Matrix<T1__, -1, 1>& t_change,
                       const int& T, const int& S, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 48;
    validate_non_negative_index("A", "T", T);
    current_statement__ = 48;
    validate_non_negative_index("A", "S", S);
    Eigen::Matrix<local_scalar_t__, -1, -1> A;
    A = Eigen::Matrix<local_scalar_t__, -1, -1>(T, S);
    
    current_statement__ = 48;
    for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
      current_statement__ = 48;
      for (size_t sym2__ = 1; sym2__ <= S; ++sym2__) {
        current_statement__ = 48;
        assign(A,
          cons_list(index_uni(sym1__),
            cons_list(index_uni(sym2__), nil_index_list())),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable A");}
    }
    current_statement__ = 49;
    validate_non_negative_index("a_row", "S", S);
    Eigen::Matrix<local_scalar_t__, 1, -1> a_row;
    a_row = Eigen::Matrix<local_scalar_t__, 1, -1>(S);
    
    current_statement__ = 49;
    for (size_t sym1__ = 1; sym1__ <= S; ++sym1__) {
      current_statement__ = 49;
      assign(a_row, cons_list(index_uni(sym1__), nil_index_list()),
        std::numeric_limits<double>::quiet_NaN(), "assigning variable a_row");
    }
    int cp_idx;
    
    current_statement__ = 51;
    assign(A, nil_index_list(), rep_matrix(0, T, S), "assigning variable A");
    current_statement__ = 52;
    assign(a_row, nil_index_list(), rep_row_vector(0, S),
      "assigning variable a_row");
    current_statement__ = 53;
    cp_idx = 1;
    current_statement__ = 60;
    for (size_t i = 1; i <= T; ++i) {
      current_statement__ = 57;
      while ((primitive_value(logical_lte(cp_idx, S)) && primitive_value(
             logical_gte(t[(i - 1)], t_change[(cp_idx - 1)])))) {
        current_statement__ = 54;
        assign(a_row, cons_list(index_uni(cp_idx), nil_index_list()), 1,
          "assigning variable a_row");
        current_statement__ = 55;
        cp_idx = (cp_idx + 1);
      }
      current_statement__ = 58;
      assign(A, cons_list(index_uni(i), nil_index_list()), a_row,
        "assigning variable A");}
    current_statement__ = 61;
    return A;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_changepoint_matrix_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__,
T1__>::type, -1, -1>
operator()(const Eigen::Matrix<T0__, -1, 1>& t,
           const Eigen::Matrix<T1__, -1, 1>& t_change, const int& T,
           const int& S, std::ostream* pstream__)  const 
{
return get_changepoint_matrix(t, t_change, T, S, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type, -1, 1>
logistic_gamma(const T0__& k, const T1__& m,
               const Eigen::Matrix<T2__, -1, 1>& delta,
               const Eigen::Matrix<T3__, -1, 1>& t_change, const int& S,
               std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 63;
    validate_non_negative_index("gamma", "S", S);
    Eigen::Matrix<local_scalar_t__, -1, 1> gamma;
    gamma = Eigen::Matrix<local_scalar_t__, -1, 1>(S);
    
    current_statement__ = 63;
    for (size_t sym1__ = 1; sym1__ <= S; ++sym1__) {
      current_statement__ = 63;
      assign(gamma, cons_list(index_uni(sym1__), nil_index_list()),
        std::numeric_limits<double>::quiet_NaN(), "assigning variable gamma");
    }
    current_statement__ = 64;
    validate_non_negative_index("k_s", "(S + 1)", (S + 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> k_s;
    k_s = Eigen::Matrix<local_scalar_t__, -1, 1>((S + 1));
    
    current_statement__ = 64;
    for (size_t sym1__ = 1; sym1__ <= (S + 1); ++sym1__) {
      current_statement__ = 64;
      assign(k_s, cons_list(index_uni(sym1__), nil_index_list()),
        std::numeric_limits<double>::quiet_NaN(), "assigning variable k_s");}
    local_scalar_t__ m_pr;
    
    current_statement__ = 65;
    m_pr = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 66;
    assign(k_s, nil_index_list(),
      append_row(k, add(k, cumulative_sum(delta))), "assigning variable k_s");
    current_statement__ = 67;
    m_pr = m;
    current_statement__ = 71;
    for (size_t i = 1; i <= S; ++i) {
      current_statement__ = 68;
      assign(gamma, cons_list(index_uni(i), nil_index_list()),
        ((t_change[(i - 1)] - m_pr) *
          (1 - (k_s[(i - 1)] / k_s[((i + 1) - 1)]))),
        "assigning variable gamma");
      current_statement__ = 69;
      m_pr = (m_pr + gamma[(i - 1)]);}
    current_statement__ = 72;
    return gamma;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logistic_gamma_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type, -1, 1>
operator()(const T0__& k, const T1__& m,
           const Eigen::Matrix<T2__, -1, 1>& delta,
           const Eigen::Matrix<T3__, -1, 1>& t_change, const int& S,
           std::ostream* pstream__)  const 
{
return logistic_gamma(k, m, delta, t_change, S, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__,
T6__>::type>::type, -1, 1>
logistic_trend(const T0__& k, const T1__& m,
               const Eigen::Matrix<T2__, -1, 1>& delta,
               const Eigen::Matrix<T3__, -1, 1>& t,
               const Eigen::Matrix<T4__, -1, 1>& cap,
               const Eigen::Matrix<T5__, -1, -1>& A,
               const Eigen::Matrix<T6__, -1, 1>& t_change, const int& S,
               std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 74;
    validate_non_negative_index("gamma", "S", S);
    Eigen::Matrix<local_scalar_t__, -1, 1> gamma;
    gamma = Eigen::Matrix<local_scalar_t__, -1, 1>(S);
    
    current_statement__ = 74;
    for (size_t sym1__ = 1; sym1__ <= S; ++sym1__) {
      current_statement__ = 74;
      assign(gamma, cons_list(index_uni(sym1__), nil_index_list()),
        std::numeric_limits<double>::quiet_NaN(), "assigning variable gamma");
    }
    current_statement__ = 75;
    assign(gamma, nil_index_list(),
      logistic_gamma(k, m, delta, t_change, S, pstream__),
      "assigning variable gamma");
    current_statement__ = 76;
    return elt_multiply(cap,
             inv_logit(
               elt_multiply(add(k, multiply(A, delta)),
                 subtract(t, add(m, multiply(A, gamma))))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logistic_trend_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__,
T6__>::type>::type, -1, 1>
operator()(const T0__& k, const T1__& m,
           const Eigen::Matrix<T2__, -1, 1>& delta,
           const Eigen::Matrix<T3__, -1, 1>& t,
           const Eigen::Matrix<T4__, -1, 1>& cap,
           const Eigen::Matrix<T5__, -1, -1>& A,
           const Eigen::Matrix<T6__, -1, 1>& t_change, const int& S,
           std::ostream* pstream__)  const 
{
return logistic_trend(k, m, delta, t, cap, A, t_change, S, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__>::type>::type, -1, 1>
linear_trend(const T0__& k, const T1__& m,
             const Eigen::Matrix<T2__, -1, 1>& delta,
             const Eigen::Matrix<T3__, -1, 1>& t,
             const Eigen::Matrix<T4__, -1, -1>& A,
             const Eigen::Matrix<T5__, -1, 1>& t_change,
             std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 78;
    return add(elt_multiply(add(k, multiply(A, delta)), t),
             add(m, multiply(A, elt_multiply(minus(t_change), delta))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct linear_trend_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__>::type>::type, -1, 1>
operator()(const T0__& k, const T1__& m,
           const Eigen::Matrix<T2__, -1, 1>& delta,
           const Eigen::Matrix<T3__, -1, 1>& t,
           const Eigen::Matrix<T4__, -1, -1>& A,
           const Eigen::Matrix<T5__, -1, 1>& t_change,
           std::ostream* pstream__)  const 
{
return linear_trend(k, m, delta, t, A, t_change, pstream__);
}
};

class prophet_normal_truncated_model : public model_base_crtp<prophet_normal_truncated_model> {

 private:
  int pos__;
  int T;
  int K;
  Eigen::Matrix<double, -1, 1> t;
  Eigen::Matrix<double, -1, 1> cap;
  Eigen::Matrix<double, -1, 1> y;
  int S;
  Eigen::Matrix<double, -1, 1> t_change;
  Eigen::Matrix<double, -1, -1> X;
  Eigen::Matrix<double, -1, 1> sigmas;
  double tau;
  int trend_indicator;
  Eigen::Matrix<double, -1, 1> s_a;
  Eigen::Matrix<double, -1, 1> s_m;
  int n_constr;
  std::vector<int> constr_vec;
  std::vector<int> norm_vec;
  Eigen::Matrix<double, -1, -1> B;
  Eigen::Matrix<double, -1, -1> A;
 
 public:
  ~prophet_normal_truncated_model() { }
  
  std::string model_name() const { return "prophet_normal_truncated_model"; }
  
  prophet_normal_truncated_model(stan::io::var_context& context__,
                                 unsigned int random_seed__ = 0,
                                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "prophet_normal_truncated_model_namespace::prophet_normal_truncated_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      pos__ = 1;
      context__.validate_dims("data initialization","T","int",
          context__.to_vec());
      
      current_statement__ = 29;
      T = context__.vals_i("T")[(1 - 1)];
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      
      current_statement__ = 30;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 31;
      validate_non_negative_index("t", "T", T);
      context__.validate_dims("data initialization","t","double",
          context__.to_vec(T));
      t = Eigen::Matrix<double, -1, 1>(T);
      
      {
        std::vector<local_scalar_t__> t_flat__;
        current_statement__ = 31;
        assign(t_flat__, nil_index_list(), context__.vals_r("t"),
          "assigning variable t_flat__");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 31;
          assign(t, cons_list(index_uni(sym1__), nil_index_list()),
            t_flat__[(pos__ - 1)], "assigning variable t");
          current_statement__ = 31;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 32;
      validate_non_negative_index("cap", "T", T);
      context__.validate_dims("data initialization","cap","double",
          context__.to_vec(T));
      cap = Eigen::Matrix<double, -1, 1>(T);
      
      {
        std::vector<local_scalar_t__> cap_flat__;
        current_statement__ = 32;
        assign(cap_flat__, nil_index_list(), context__.vals_r("cap"),
          "assigning variable cap_flat__");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 32;
          assign(cap, cons_list(index_uni(sym1__), nil_index_list()),
            cap_flat__[(pos__ - 1)], "assigning variable cap");
          current_statement__ = 32;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 33;
      validate_non_negative_index("y", "T", T);
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(T));
      y = Eigen::Matrix<double, -1, 1>(T);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 33;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 33;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 33;
          pos__ = (pos__ + 1);}
      }
      context__.validate_dims("data initialization","S","int",
          context__.to_vec());
      
      current_statement__ = 34;
      S = context__.vals_i("S")[(1 - 1)];
      current_statement__ = 35;
      validate_non_negative_index("t_change", "S", S);
      context__.validate_dims("data initialization","t_change","double",
          context__.to_vec(S));
      t_change = Eigen::Matrix<double, -1, 1>(S);
      
      {
        std::vector<local_scalar_t__> t_change_flat__;
        current_statement__ = 35;
        assign(t_change_flat__, nil_index_list(),
          context__.vals_r("t_change"), "assigning variable t_change_flat__");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (size_t sym1__ = 1; sym1__ <= S; ++sym1__) {
          current_statement__ = 35;
          assign(t_change, cons_list(index_uni(sym1__), nil_index_list()),
            t_change_flat__[(pos__ - 1)], "assigning variable t_change");
          current_statement__ = 35;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 36;
      validate_non_negative_index("X", "T", T);
      current_statement__ = 36;
      validate_non_negative_index("X", "K", K);
      context__.validate_dims("data initialization","X","double",
          context__.to_vec(T, K));
      X = Eigen::Matrix<double, -1, -1>(T, K);
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 36;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 36;
          for (size_t sym2__ = 1; sym2__ <= T; ++sym2__) {
            current_statement__ = 36;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 36;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 37;
      validate_non_negative_index("sigmas", "K", K);
      context__.validate_dims("data initialization","sigmas","double",
          context__.to_vec(K));
      sigmas = Eigen::Matrix<double, -1, 1>(K);
      
      {
        std::vector<local_scalar_t__> sigmas_flat__;
        current_statement__ = 37;
        assign(sigmas_flat__, nil_index_list(), context__.vals_r("sigmas"),
          "assigning variable sigmas_flat__");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 37;
          assign(sigmas, cons_list(index_uni(sym1__), nil_index_list()),
            sigmas_flat__[(pos__ - 1)], "assigning variable sigmas");
          current_statement__ = 37;
          pos__ = (pos__ + 1);}
      }
      context__.validate_dims("data initialization","tau","double",
          context__.to_vec());
      
      current_statement__ = 38;
      tau = context__.vals_r("tau")[(1 - 1)];
      context__.validate_dims("data initialization","trend_indicator","int",
          context__.to_vec());
      
      current_statement__ = 39;
      trend_indicator = context__.vals_i("trend_indicator")[(1 - 1)];
      current_statement__ = 40;
      validate_non_negative_index("s_a", "K", K);
      context__.validate_dims("data initialization","s_a","double",
          context__.to_vec(K));
      s_a = Eigen::Matrix<double, -1, 1>(K);
      
      {
        std::vector<local_scalar_t__> s_a_flat__;
        current_statement__ = 40;
        assign(s_a_flat__, nil_index_list(), context__.vals_r("s_a"),
          "assigning variable s_a_flat__");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 40;
          assign(s_a, cons_list(index_uni(sym1__), nil_index_list()),
            s_a_flat__[(pos__ - 1)], "assigning variable s_a");
          current_statement__ = 40;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 41;
      validate_non_negative_index("s_m", "K", K);
      context__.validate_dims("data initialization","s_m","double",
          context__.to_vec(K));
      s_m = Eigen::Matrix<double, -1, 1>(K);
      
      {
        std::vector<local_scalar_t__> s_m_flat__;
        current_statement__ = 41;
        assign(s_m_flat__, nil_index_list(), context__.vals_r("s_m"),
          "assigning variable s_m_flat__");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 41;
          assign(s_m, cons_list(index_uni(sym1__), nil_index_list()),
            s_m_flat__[(pos__ - 1)], "assigning variable s_m");
          current_statement__ = 41;
          pos__ = (pos__ + 1);}
      }
      context__.validate_dims("data initialization","n_constr","int",
          context__.to_vec());
      
      current_statement__ = 42;
      n_constr = context__.vals_i("n_constr")[(1 - 1)];
      current_statement__ = 43;
      validate_non_negative_index("constr_vec", "n_constr", n_constr);
      context__.validate_dims("data initialization","constr_vec","int",
          context__.to_vec(n_constr));
      constr_vec = std::vector<int>(n_constr, 0);
      
      current_statement__ = 43;
      assign(constr_vec, nil_index_list(), context__.vals_i("constr_vec"),
        "assigning variable constr_vec");
      current_statement__ = 44;
      validate_non_negative_index("norm_vec", "(K - n_constr)",
                                  (K - n_constr));
      context__.validate_dims("data initialization","norm_vec","int",
          context__.to_vec((K - n_constr)));
      norm_vec = std::vector<int>((K - n_constr), 0);
      
      current_statement__ = 44;
      assign(norm_vec, nil_index_list(), context__.vals_i("norm_vec"),
        "assigning variable norm_vec");
      current_statement__ = 45;
      validate_non_negative_index("B", "n_constr", n_constr);
      current_statement__ = 45;
      validate_non_negative_index("B", "2", 2);
      context__.validate_dims("data initialization","B","double",
          context__.to_vec(n_constr, 2));
      B = Eigen::Matrix<double, -1, -1>(n_constr, 2);
      
      {
        std::vector<local_scalar_t__> B_flat__;
        current_statement__ = 45;
        assign(B_flat__, nil_index_list(), context__.vals_r("B"),
          "assigning variable B_flat__");
        current_statement__ = 45;
        pos__ = 1;
        current_statement__ = 45;
        for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 45;
          for (size_t sym2__ = 1; sym2__ <= n_constr; ++sym2__) {
            current_statement__ = 45;
            assign(B,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              B_flat__[(pos__ - 1)], "assigning variable B");
            current_statement__ = 45;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 46;
      validate_non_negative_index("A", "T", T);
      current_statement__ = 46;
      validate_non_negative_index("A", "S", S);
      A = Eigen::Matrix<double, -1, -1>(T, S);
      
      current_statement__ = 46;
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 46;
        for (size_t sym2__ = 1; sym2__ <= S; ++sym2__) {
          current_statement__ = 46;
          assign(A,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            std::numeric_limits<double>::quiet_NaN(), "assigning variable A");
        }}
      current_statement__ = 47;
      assign(A, nil_index_list(),
        get_changepoint_matrix(t, t_change, T, S, pstream__),
        "assigning variable A");
      current_statement__ = 30;
      current_statement__ = 30;
      check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 38;
      current_statement__ = 38;
      check_greater_or_equal(function__, "tau", tau, 0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      current_statement__ = 3;
      validate_non_negative_index("delta", "S", S);
      num_params_r__ += S;
      num_params_r__ += 1;
      current_statement__ = 5;
      validate_non_negative_index("beta_constrained", "n_constr", n_constr);
      num_params_r__ += n_constr;
      current_statement__ = 6;
      validate_non_negative_index("beta_unconstrained", "(K - n_constr)",
                                  (K - n_constr));
      num_params_r__ += (K - n_constr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "prophet_normal_truncated_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      local_scalar_t__ k;
      
      current_statement__ = 1;
      k = in__.scalar();
      local_scalar_t__ m;
      
      current_statement__ = 2;
      m = in__.scalar();
      current_statement__ = 3;
      validate_non_negative_index("delta", "S", S);
      Eigen::Matrix<local_scalar_t__, -1, 1> delta;
      delta = Eigen::Matrix<local_scalar_t__, -1, 1>(S);
      
      current_statement__ = 3;
      delta = in__.vector(S);
      local_scalar_t__ sigma_obs;
      
      current_statement__ = 4;
      sigma_obs = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        sigma_obs = stan::math::lb_constrain(sigma_obs, 0, lp__);
      } else {
        current_statement__ = 4;
        sigma_obs = stan::math::lb_constrain(sigma_obs, 0);
      }
      current_statement__ = 5;
      validate_non_negative_index("beta_constrained", "n_constr", n_constr);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_constrained;
      beta_constrained = Eigen::Matrix<local_scalar_t__, -1, 1>(n_constr);
      
      current_statement__ = 5;
      beta_constrained = in__.vector(n_constr);
      current_statement__ = 5;
      for (size_t sym1__ = 1; sym1__ <= n_constr; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(beta_constrained,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(beta_constrained[(sym1__ - 1)], 0, lp__),
            "assigning variable beta_constrained");
        } else {
          current_statement__ = 5;
          assign(beta_constrained,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(beta_constrained[(sym1__ - 1)], 0),
            "assigning variable beta_constrained");
        }}
      current_statement__ = 6;
      validate_non_negative_index("beta_unconstrained", "(K - n_constr)",
                                  (K - n_constr));
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_unconstrained;
      beta_unconstrained = Eigen::Matrix<local_scalar_t__, -1, 1>((K -
                                                                    n_constr));
      
      current_statement__ = 6;
      beta_unconstrained = in__.vector((K - n_constr));
      current_statement__ = 7;
      validate_non_negative_index("beta", "K", K);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      
      current_statement__ = 7;
      for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 7;
        assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable beta");
      }
      current_statement__ = 8;
      validate_non_negative_index("sigmas_pos", "n_constr", n_constr);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigmas_pos;
      sigmas_pos = Eigen::Matrix<local_scalar_t__, -1, 1>(n_constr);
      
      current_statement__ = 8;
      for (size_t sym1__ = 1; sym1__ <= n_constr; ++sym1__) {
        current_statement__ = 8;
        assign(sigmas_pos, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable sigmas_pos");}
      current_statement__ = 9;
      assign(beta, cons_list(index_multi(norm_vec), nil_index_list()),
        beta_unconstrained, "assigning variable beta");
      current_statement__ = 10;
      assign(beta, cons_list(index_multi(constr_vec), nil_index_list()),
        beta_constrained, "assigning variable beta");
      current_statement__ = 11;
      assign(sigmas_pos, nil_index_list(),
        rvalue(sigmas, cons_list(index_multi(constr_vec), nil_index_list()),
          "sigmas"), "assigning variable sigmas_pos");
      {
        current_statement__ = 12;
        lp_accum__.add(normal_log<propto__>(k, 0, 5));
        current_statement__ = 13;
        lp_accum__.add(normal_log<propto__>(m, 0, 5));
        current_statement__ = 14;
        lp_accum__.add(double_exponential_log<propto__>(delta, 0, tau));
        current_statement__ = 15;
        lp_accum__.add(normal_log<propto__>(sigma_obs, 0, 0.5));
        current_statement__ = 16;
        lp_accum__.add(
          normal_log<propto__>(beta_unconstrained, 0,
            rvalue(sigmas,
              cons_list(index_multi(norm_vec), nil_index_list()), "sigmas")));
        current_statement__ = 21;
        for (size_t i = 1; i <= n_constr; ++i) {
          current_statement__ = 18;
          if (logical_lt(beta_constrained[(i - 1)],
                rvalue(B,
                  cons_list(index_uni(i),
                    cons_list(index_uni(1), nil_index_list())), "B"))) {
            current_statement__ = 18;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 17;
            if (logical_gt(beta_constrained[(i - 1)],
                  rvalue(B,
                    cons_list(index_uni(i),
                      cons_list(index_uni(2), nil_index_list())), "B"))) {
              current_statement__ = 17;
              lp_accum__.add(stan::math::negative_infinity());
            } else {
              current_statement__ = 17;
              lp_accum__.add(
                -log_diff_exp(
                   normal_cdf_log(
                     rvalue(B,
                       cons_list(index_uni(i),
                         cons_list(index_uni(2), nil_index_list())), "B"), 0,
                     sigmas_pos[(i - 1)]),
                   normal_cdf_log(
                     rvalue(B,
                       cons_list(index_uni(i),
                         cons_list(index_uni(1), nil_index_list())), "B"), 0,
                     sigmas_pos[(i - 1)])));
            }
          }
          current_statement__ = 19;
          lp_accum__.add(
            normal_log<propto__>(beta_constrained[(i - 1)], 0,
              sigmas_pos[(i - 1)]));}
        ;
        current_statement__ = 28;
        if (logical_eq(trend_indicator, 0)) {
          current_statement__ = 26;
          lp_accum__.add(
            normal_log<propto__>(y,
              add(
                elt_multiply(
                  linear_trend(k, m, delta, t, A, t_change, pstream__),
                  add(1, multiply(X, elt_multiply(beta, s_m)))),
                multiply(X, elt_multiply(beta, s_a))), sigma_obs));
        } else {
          current_statement__ = 25;
          if (logical_eq(trend_indicator, 1)) {
            current_statement__ = 23;
            lp_accum__.add(
              normal_log<propto__>(y,
                add(
                  elt_multiply(
                    logistic_trend(k, m, delta, t, cap, A, t_change,
                      S, pstream__),
                    add(1, multiply(X, elt_multiply(beta, s_m)))),
                  multiply(X, elt_multiply(beta, s_a))), sigma_obs));
          } 
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "prophet_normal_truncated_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    
    try {
      double k;
      
      current_statement__ = 1;
      k = in__.scalar();
      double m;
      
      current_statement__ = 2;
      m = in__.scalar();
      current_statement__ = 3;
      validate_non_negative_index("delta", "S", S);
      Eigen::Matrix<double, -1, 1> delta;
      delta = Eigen::Matrix<double, -1, 1>(S);
      
      current_statement__ = 3;
      delta = in__.vector(S);
      double sigma_obs;
      
      current_statement__ = 4;
      sigma_obs = in__.scalar();
      current_statement__ = 4;
      sigma_obs = stan::math::lb_constrain(sigma_obs, 0);
      current_statement__ = 5;
      validate_non_negative_index("beta_constrained", "n_constr", n_constr);
      Eigen::Matrix<double, -1, 1> beta_constrained;
      beta_constrained = Eigen::Matrix<double, -1, 1>(n_constr);
      
      current_statement__ = 5;
      beta_constrained = in__.vector(n_constr);
      current_statement__ = 5;
      for (size_t sym1__ = 1; sym1__ <= n_constr; ++sym1__) {
        current_statement__ = 5;
        assign(beta_constrained,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(beta_constrained[(sym1__ - 1)], 0),
          "assigning variable beta_constrained");}
      current_statement__ = 6;
      validate_non_negative_index("beta_unconstrained", "(K - n_constr)",
                                  (K - n_constr));
      Eigen::Matrix<double, -1, 1> beta_unconstrained;
      beta_unconstrained = Eigen::Matrix<double, -1, 1>((K - n_constr));
      
      current_statement__ = 6;
      beta_unconstrained = in__.vector((K - n_constr));
      current_statement__ = 7;
      validate_non_negative_index("beta", "K", K);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(K);
      
      current_statement__ = 7;
      for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 7;
        assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable beta");
      }
      current_statement__ = 8;
      validate_non_negative_index("sigmas_pos", "n_constr", n_constr);
      Eigen::Matrix<double, -1, 1> sigmas_pos;
      sigmas_pos = Eigen::Matrix<double, -1, 1>(n_constr);
      
      current_statement__ = 8;
      for (size_t sym1__ = 1; sym1__ <= n_constr; ++sym1__) {
        current_statement__ = 8;
        assign(sigmas_pos, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable sigmas_pos");}
      vars__.push_back(k);
      vars__.push_back(m);
      for (size_t sym1__ = 1; sym1__ <= S; ++sym1__) {
        vars__.push_back(delta[(sym1__ - 1)]);}
      vars__.push_back(sigma_obs);
      for (size_t sym1__ = 1; sym1__ <= n_constr; ++sym1__) {
        vars__.push_back(beta_constrained[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= (K - n_constr); ++sym1__) {
        vars__.push_back(beta_unconstrained[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 9;
      assign(beta, cons_list(index_multi(norm_vec), nil_index_list()),
        beta_unconstrained, "assigning variable beta");
      current_statement__ = 10;
      assign(beta, cons_list(index_multi(constr_vec), nil_index_list()),
        beta_constrained, "assigning variable beta");
      current_statement__ = 11;
      assign(sigmas_pos, nil_index_list(),
        rvalue(sigmas, cons_list(index_multi(constr_vec), nil_index_list()),
          "sigmas"), "assigning variable sigmas_pos");
      for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.push_back(beta[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= n_constr; ++sym1__) {
        vars__.push_back(sigmas_pos[(sym1__ - 1)]);}
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      pos__ = 1;
      double k;
      
      current_statement__ = 1;
      k = context__.vals_r("k")[(1 - 1)];
      double m;
      
      current_statement__ = 2;
      m = context__.vals_r("m")[(1 - 1)];
      current_statement__ = 3;
      validate_non_negative_index("delta", "S", S);
      Eigen::Matrix<double, -1, 1> delta;
      delta = Eigen::Matrix<double, -1, 1>(S);
      
      {
        std::vector<local_scalar_t__> delta_flat__;
        current_statement__ = 3;
        assign(delta_flat__, nil_index_list(), context__.vals_r("delta"),
          "assigning variable delta_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (size_t sym1__ = 1; sym1__ <= S; ++sym1__) {
          current_statement__ = 3;
          assign(delta, cons_list(index_uni(sym1__), nil_index_list()),
            delta_flat__[(pos__ - 1)], "assigning variable delta");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      double sigma_obs;
      
      current_statement__ = 4;
      sigma_obs = context__.vals_r("sigma_obs")[(1 - 1)];
      current_statement__ = 4;
      sigma_obs = stan::math::lb_free(sigma_obs, 0);
      current_statement__ = 5;
      validate_non_negative_index("beta_constrained", "n_constr", n_constr);
      Eigen::Matrix<double, -1, 1> beta_constrained;
      beta_constrained = Eigen::Matrix<double, -1, 1>(n_constr);
      
      {
        std::vector<local_scalar_t__> beta_constrained_flat__;
        current_statement__ = 5;
        assign(beta_constrained_flat__, nil_index_list(),
          context__.vals_r("beta_constrained"),
          "assigning variable beta_constrained_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (size_t sym1__ = 1; sym1__ <= n_constr; ++sym1__) {
          current_statement__ = 5;
          assign(beta_constrained,
            cons_list(index_uni(sym1__), nil_index_list()),
            beta_constrained_flat__[(pos__ - 1)],
            "assigning variable beta_constrained");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 5;
      for (size_t sym1__ = 1; sym1__ <= n_constr; ++sym1__) {
        current_statement__ = 5;
        assign(beta_constrained,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(beta_constrained[(sym1__ - 1)], 0),
          "assigning variable beta_constrained");}
      current_statement__ = 6;
      validate_non_negative_index("beta_unconstrained", "(K - n_constr)",
                                  (K - n_constr));
      Eigen::Matrix<double, -1, 1> beta_unconstrained;
      beta_unconstrained = Eigen::Matrix<double, -1, 1>((K - n_constr));
      
      {
        std::vector<local_scalar_t__> beta_unconstrained_flat__;
        current_statement__ = 6;
        assign(beta_unconstrained_flat__, nil_index_list(),
          context__.vals_r("beta_unconstrained"),
          "assigning variable beta_unconstrained_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (size_t sym1__ = 1; sym1__ <= (K - n_constr); ++sym1__) {
          current_statement__ = 6;
          assign(beta_unconstrained,
            cons_list(index_uni(sym1__), nil_index_list()),
            beta_unconstrained_flat__[(pos__ - 1)],
            "assigning variable beta_unconstrained");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      vars__.push_back(k);
      vars__.push_back(m);
      for (size_t sym1__ = 1; sym1__ <= S; ++sym1__) {
        vars__.push_back(delta[(sym1__ - 1)]);}
      vars__.push_back(sigma_obs);
      for (size_t sym1__ = 1; sym1__ <= n_constr; ++sym1__) {
        vars__.push_back(beta_constrained[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= (K - n_constr); ++sym1__) {
        vars__.push_back(beta_unconstrained[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("k");
    names__.push_back("m");
    names__.push_back("delta");
    names__.push_back("sigma_obs");
    names__.push_back("beta_constrained");
    names__.push_back("beta_unconstrained");
    names__.push_back("beta");
    names__.push_back("sigmas_pos");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(S);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(n_constr);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((K - n_constr));
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(K);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(n_constr);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "k");
    param_names__.push_back(std::string() + "m");
    for (size_t sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.push_back(std::string() + "delta" + '.' + std::to_string(sym1__));
      }}
    param_names__.push_back(std::string() + "sigma_obs");
    for (size_t sym1__ = 1; sym1__ <= n_constr; ++sym1__) {
      {
        param_names__.push_back(std::string() + "beta_constrained" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= (K - n_constr); ++sym1__) {
      {
        param_names__.push_back(std::string() + "beta_unconstrained" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.push_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= n_constr; ++sym1__) {
        {
          param_names__.push_back(std::string() + "sigmas_pos" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "k");
    param_names__.push_back(std::string() + "m");
    for (size_t sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.push_back(std::string() + "delta" + '.' + std::to_string(sym1__));
      }}
    param_names__.push_back(std::string() + "sigma_obs");
    for (size_t sym1__ = 1; sym1__ <= n_constr; ++sym1__) {
      {
        param_names__.push_back(std::string() + "beta_constrained" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= (K - n_constr); ++sym1__) {
      {
        param_names__.push_back(std::string() + "beta_unconstrained" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.push_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= n_constr; ++sym1__) {
        {
          param_names__.push_back(std::string() + "sigmas_pos" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" << S << "},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_constrained\",\"type\":{\"name\":\"vector\",\"length\":" << n_constr << "},\"block\":\"parameters\"},{\"name\":\"beta_unconstrained\",\"type\":{\"name\":\"vector\",\"length\":" << (K - n_constr) << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigmas_pos\",\"type\":{\"name\":\"vector\",\"length\":" << n_constr << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" << S << "},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_constrained\",\"type\":{\"name\":\"vector\",\"length\":" << n_constr << "},\"block\":\"parameters\"},{\"name\":\"beta_unconstrained\",\"type\":{\"name\":\"vector\",\"length\":" << (K - n_constr) << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigmas_pos\",\"type\":{\"name\":\"vector\",\"length\":" << n_constr << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}

typedef prophet_normal_truncated_model_namespace::prophet_normal_truncated_model stan_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


